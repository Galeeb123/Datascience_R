beijing2022Medals = read.csv("Beijing2022.csv", header = FALSE, sep = ";")
colnames(beijing2022Medals) = c('Country','Gold','Silver','Bronze')
beijing2022Medals
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals
beijing2022Medals$Total_medals = beijing2022Medals$Gold + beijing2022Medals$Silver + beijing2022Medals$Bronze
beijing2022Medals
beijing2022Medals[c(1),]
beijing2022Medals[c(1:5),]
sum(beijing2022Medals[,1])
sum(beijing2022Medals[,2])
sum(beijing2022Medals[1:5,2])
sum(beijing2022Medals[1:5,])
(beijing2022Medals[1:5,])
sum(beijing2022Medals[,2])
beijing2022Medals[order(-beijing2022Medals$Total_medals), ]
beijing2022Medals[order(-beijing2022Medals$Total_medals, -beijing2022Medals$Gold), ]
Total_Gold = sum(beijing2022Medals[, c(2)])
Total_Gold
Total_Silver = sum(beijing2022Medals[, c(3)])
Total_Silver
sum(beijing2022Medals["Total_medals"])
medals = data.frame(Country =c("NOR", "GER ", " CHN"),
Gold =c(16 ,12 ,9) ,
Silver =c(8 ,10 ,4) ,
Bronze =c(13 ,5 ,2))
medals
medals[c(1,3),c(1,4)]
medals[c(1,3)]
medals[c(1:3)]
P = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
P                      # print the matrix
sum(P[1,])
P = matrix(
c(2, 4, 3, 1, 5, 7,3,7,8), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
P                      # print the matrix
P[1,]
P[1,3]
P[1:3,]
P[2:3,]
P[,2:3]
P[1,]p[3,]
P[c(1,3),]
P[c(1,3)]
P[c(1,3),]
P[ ,c(1,3)]
P[ ,c(1:3)]
P[ ,c(1,3)]
p[1,]
P[1,]
P[c(1,3),]
P[c(1,3),]
P[c(1,3),c(1,3)]
medals[c(1,3),c(1,3)]
medals[c(1,3),c(1,4)]
medals[c(1,2),]
medals[1:2,]
P["row2", ]
subset(medals, Gold > 10, select = c(Country, Gold))
medals[order(-medals$Bronze), ]
beijing2022Medals = read.csv("Beijing2022.csv", header = FALSE, sep = ";")
colnames(beijing2022Medals) = c('Country','Gold','Silver','Bronze')
beijing2022Medals
beijing2022Medals$Total_medals = beijing2022Medals$Gold + beijing2022Medals$Silver + beijing2022Medals$Bronze
beijing2022Medals
sum(P[1,])
sum(beijing2022Medals(1,))
sum(P[1:3,])
sum(P[1:,])
sum(P[1,])
sum(beijing2022Medals[2,])
sum(beijing2022Medals[2,],beijing2022Medals[,2])
sum[beijing2022Medals(2,),beijing2022Medals(,2)]
sum(beijing2022Medals[2,])
beijing2022Medals$Total_medals = beijing2022Medals$Gold + beijing2022Medals$Silver + beijing2022Medals$Bronze
beijing2022Medals
sum(beijing2022Medals[c(2,),])
sum(beijing2022Medals[c(2:),])
sum(beijing2022Medals[c(2:4),])
sum(beijing2022Medals[c(2),c(2)])
sum(beijing2022Medals[c(2),c(2,)])
sum(beijing2022Medals[c(2),c(2:4)])
sum(beijing2022Medals[c(2),c(2,)])
sum(beijing2022Medals[c(2,),c(2:4)])
sum(beijing2022Medals[c(2:5),c(2:4)])
beijing2022Medals[order(-beijing2022Medals$Total_medals), ]
beijing2022Medals[order(beijing2022Medals$Total_medals), ]
beijing2022Medals[order(-beijing2022Medals$Total_medals), ]
beijing2022Medals[order(-beijing2022Medals$Total_medals, -beijing2022Medals$Gold), ]
Total_Gold = sum(beijing2022Medals[, c(2)])
Total_Gold
Total_Gold = sum(beijing2022Medals[, c(2)])
Total_Gold
Total_Silver = sum(beijing2022Medals[, c(3)])
Total_Silver
Total_Bronze = sum(beijing2022Medals[, c(4)])
Total_Bronze
medals = data.frame(Country =c("NOR", "GER ", " CHN"),
Gold =c(16 ,12 ,9) ,
Silver =c(8 ,10 ,4) ,
Bronze =c(13 ,5 ,2))
medals
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals
beijing2022Medals$Total_medals = beijing2022Medals$Gold + beijing2022Medals$Silver + beijing2022Medals$Bronze
beijing2022Medals
sum(beijing2022Medals[c(2:5),c(2:4)])
sum(beijing2022Medals[c(2,),c(2:4)])
P[c(1,3),c(1,3)]
sum(P[1,2])
sum(P[1:2])
P = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
P                      # print the matrix
P = matrix(
c(2, 4, 3, 1, 5, 7,3,4,5), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
P                      # print the matrix
sum(beijing2022Medals[c(1),c(2:4)])
sum(P[1:3,])
sum(P[1:,])
sum(beijing2022Medals[c(1:5),c(2:4)])
sum(P[c(1,2),])
sum(P[c(1,3),])
sum(beijing2022Medals[c(1,5),c(2:4)])
Total_Gold = sum(beijing2022Medals[, c(2)])
Total_Gold
Total_Silver = sum(beijing2022Medals[, c(3)])
Total_Silver
sum(beijing2022Medals["Total_medals"])
Total_Silver = sum(beijing2022Medals[, c(3)])
Total_Silver
Total_Bronze = sum(beijing2022Medals[, c(4)])
Total_Bronze
filter(beijing2022Medals,Country == "Canada")
library("dplyr")  # Importing packages
filter(beijing2022Medals,Country == "Canada")
filter (mpg, manufacturer =="audi" | year ==1999)
library("tidyverse")   # Importing packages
mpg  # Displaying data. (data from tidyverse library)
filter (mpg, manufacturer =="audi" | year ==1999)
filter (mpg , manufacturer !="audi" & year ==1999)
beijing2022Medals = read.csv("Beijing2022.csv", header = FALSE, sep = ";")
colnames(beijing2022Medals) = c('Country','Gold','Silver','Bronze')
beijing2022Medals
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals
arrange (beijing2022Medals , Country )
arrange(beijing2022Medals, desc(Gold), desc(Silver), desc(Bronze))
arrange(beijing2022Medals ,desc(Gold), desc(Silver), desc(Bronze)) %>%
View()
mpg %>% select ( manufacturer , hwy) %>%
filter ( manufacturer !=" chevrolet " & hwy >=20) %>%
arrange ( desc ( manufacturer ))
beijing2022Medals$Total = mutate (beijing2022Medals, Total = Gold + Silver + Bronze)
beijing2022Medals$Total
beijing2022Medals$Total = mutate (beijing2022Medals, Total = Gold + Silver + Bronze)
beijing2022Medals$Total
beijing2022Medals
beijing2022Medals$Total = mutate (beijing2022Medals, Total = Gold + Silver + Bronze)
beijing2022Medals
beijing2022Medals$Total = mutate (beijing2022Medals, Total = Gold + Silver + Bronze)
beijing2022Medals$Total
group_by(mpg , year , manufacturer )
group_by(mpg , year , manufacturer ) %>% summarise(count =n())
group_by(mpg , year , manufacturer )
group_by(mpg , year , manufacturer ) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model) %>% group_by(manufacturer) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model)
group_by(mpg, manufacturer, model) %>% distinct(model) %>% group_by(manufacturer)
group_by(mpg, manufacturer, model) %>% distinct(model) %>% group_by(manufacturer) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model) %>%  summarise(count =n())
group_by(mpg, manufacturer, model) %>% group_by(manufacturer) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model) %>% group_by(manufacturer) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model)
group_by(mpg, manufacturer, model)
group_by(mpg, manufacturer, model) %>% view()
group_by(mpg, manufacturer, model) %>% view()
group_by(mpg, manufacturer, year) %>% view()
distinct(manufacturer,model) %>% group_by(manufacturer) %>% summarise(count =n())
group_by(mpg , year , manufacturer ) %>% summarise(count =n())
group_by(mpg , year , manufacturer )
group_by(mpg , year , manufacturer ) %>% summarise(count =n())
group_by(mpg, manufacturer, model) %>% distinct(model) %>% group_by(manufacturer) %>% summarise(count =n())
mpg
mutate(mpg, HwyCtyRatio = hwy/cty)
mpg
mutate(mpg, HwyCtyRatio = hwy/cty)
mpg
mpg1 = mutate(mpg, HwyCtyRatio = hwy/cty)
mpg1
library(tidyverse)
library(MASS)
data("faithful")
data("faithful")
str(faithful)
library ( tidyverse )
library ( MASS )
data (" women ")
str ( women )
summary (women)
ggplot ( data = women , aes (x = weight , y = height )) + geom_point ()
cor.test(women$weight,women$height)
womenModel = lm(height ~ weight, data = women)
womenModel
summary(womenModel)
layout ( matrix (1:6 , ncol =3 , byrow = TRUE ))
plot ( womenModel , 1:6)
newWomen = data.frame(weight =c(130 , 170,100))
predict( womenModel , newdata = newWomen )
womenModel = lm(height ~ weight, data = women)
womenModel
plot ( womenModel , which =1)
predict(womenModel , newdata = newWomen , interval ="confidence")
women
women$pred_height = womenModel$fitted.values
women
womenModel
womenModel = lm(height ~ weight, data = women)
womenModel
summary(womenModel)
womenModel
women$residuals = women$height - women$pred_height
women
ggplot ( data = women , aes (x = pred_height , y = residuals )) + geom_point ()
new_data = women$weight
new_pred = predict(womenModel, weight = c(new_data))
women$new_prediction=new_pred
women
summary(faithful)
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point()
cor.test(faithful$waiting, faithful$eruptions)
eruptionModel = lm(eruptions ~ waiting, data = faithful)
eruptionModel
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point() + geom_abline(mapping = aes(slope = eruptionModel$coefficients[2], intercept = eruptionModel$coefficients[1]), color ='red ')
newWaitingTime = data.frame( waiting = c(80))      # providing waiting time
predict(eruptionModel, newdata = newWaitingTime)   # predicting eruption using eruptionModel
data (" mtcars ")
? mtcars
View ( mtcars )
mpgModel = lm(formula = mpg ~ cyl + disp +hp+ drat +wt+ qsec +vs+am+ gear +carb,data = mtcars)
summary (mpgModel)
medals = data.frame(Country =c("NOR", "GER ", " CHN"),
Gold =c(16 ,12 ,9) ,
Silver =c(8 ,10 ,4) ,
Bronze =c(13 ,5 ,2))
medals
medals[c(1,3),c(1,4)]
medals[c(3),]
medals[1:2,]
subset(medals, Gold > 10, select = c(Country, Gold))
medals[order(-medals$Bronze), ]
beijing2022Medals = read.csv("Beijing2022.csv", header = FALSE, sep = ";")
colnames(beijing2022Medals) = c('Country','Gold','Silver','Bronze')
beijing2022Medals
beijing2022Medals = beijing2022Medals[-1,]
beijing2022Medals
beijing2022Medals$Total_medals = beijing2022Medals$Gold + beijing2022Medals$Silver + beijing2022Medals$Bronze
beijing2022Medals
beijing2022Medals[order(-beijing2022Medals$Total_medals), ]
beijing2022Medals[order(-beijing2022Medals$Total_medals, -beijing2022Medals$Gold), ]
Total_Gold = sum(beijing2022Medals[, c(2)])
Total_Gold
Total_Silver = sum(beijing2022Medals[, c(3)])
Total_Silver
Total_Bronze = sum(beijing2022Medals[, c(4)])
Total_Bronze
sum(beijing2022Medals["Total_medals"])
