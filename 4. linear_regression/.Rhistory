library ( tidyverse )
library ( MASS )
data (" women ")
str ( women )
summary (women )
ggplot ( data = women , aes (x = weight , y = height )) + geom_point ()
cor.test(women$weight,women$height)
ggplot ( data = women , aes (x = weight , y = height )) + geom_point ()
summary (womenModel )
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point()
womenModel = lm(height ~ weight, data = women)
womenModel = lm(height ~ weight, data = women)
womenModel
womenModel
womenModel = lm(height ~ weight, data = women)
womenModel
eruptionModel = lm(eruptions ~ waiting, data = faithful)
eruptionModel
summary(womenModel)
gplot(data = women,aes(x = weight,y = height)) +geom_point() +geom_abline(mapping = aes(slope = womenModel$coefficients [2],intercept = womenModel$coefficients[1]), color ='red ')
ggplot(data = women,aes(x = weight,y = height)) +geom_point() +geom_abline(mapping = aes(slope = womenModel$coefficients [2],intercept = womenModel$coefficients[1]), color ='red ')
womenModel
summary(womenModel)
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point() + geom_abline(mapping = aes(slope = eruptionModel$coefficients[2], intercept = eruptionModel$coefficients[1]), color ='red ')
layout(matrix (1:6, ncol = 2, byrow = TRUE))
plot(eruptionModel, 1:6)
newWaitingTime = data.frame( waiting = c(80))      # providing waiting time
predict(eruptionModel, newdata = newWaitingTime)   # predicting eruption using eruptionModel
plot ( womenModel , which =1)
layout ( matrix (1:6 , ncol =2 , byrow = TRUE ))
plot ( womenModel , 1:6)
layout ( matrix (1:6 , ncol =3 , byrow = TRUE ))
plot ( womenModel , 1:6)
layout ( matrix (1:6 , ncol =3 , byrow = TRUE ))
layout ( matrix (1:6 , ncol =3 , byrow = TRUE ))
plot ( womenModel , 1:6)
layout ( matrix (1:8 , ncol =3 , byrow = TRUE ))
plot ( womenModel , 1:6)
layout ( matrix (1:6 , ncol =3 , byrow = TRUE ))
plot ( womenModel , 1:6)
newWomen = data.frame(weight =c(130 , 170))
predict( womenModel , newdata = newWomen )
predict(womenModel , newdata = newWomen , interval =" confidence ")
predict(womenModel , newdata = newWomen , interval ="confidence")
newWomen = data.frame(weight =c(130 , 170))
predict( womenModel , newdata = newWomen )
shapiro.test(women$weight)
shapiro.test(women$height)
summary(faithful)
data("faithful")
str(faithful)
eruptionModel = lm(eruptions ~ waiting, data = faithful)
cor.test(faithful$waiting, faithful$eruptions)
cor.test(faithful$waiting, faithful$eruptions)
eruptionModel = lm(eruptions ~ waiting, data = faithful)
eruptionModel
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point() + geom_abline(mapping = aes(slope = eruptionModel$coefficients[2], intercept = eruptionModel$coefficients[1]), color ='red ')
newWaitingTime = data.frame( waiting = c(80))      # providing waiting time
predict(eruptionModel, newdata = newWaitingTime)   # predicting eruption using eruptionModel
library(tidyverse)
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
plot(mpgModel_wt, which =1)
plot(mpgModel_wt, which =1)
plot(mpgModel_wt, which =1)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
library(tidyverse)
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
library(tidyverse)
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
mpgModel = lm(formula = mpg ~ cyl + disp +hp+ drat +wt+ qsec +vs+am+ gear +carb,data = mtcars)
summary(mpgModel)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
mpgModel
plot(mpgModel_wt, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_wt = data.frame(mpg = mtcars$mpg, pred = mpgModel_wt$fitted.values)
mpgPredictions_wt
ggplot(data = mpgPredictions_wt, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_wt)
mpgModel_all = lm(formula = mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
plot(mpgModel_all, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_all = data.frame(mpg = mtcars$mpg, pred = mpgModel_all$fitted.values)
mpgPredictions_all
ggplot(data = mpgPredictions_all, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_all)
reducedModel  = step(mpgModel_all, direction ="backward")
summary(reducedModel)
# Creating a data frame with actual values and predicted values.
mpgPredictions = data.frame(mpg = mtcars$mpg, pred_ConsideringOnlyWeight = mpgModel_wt$fitted.values, pred_ConsideringAll = mpgModel_all$fitted.values, pred_UsingStepFun = reducedModel$fitted.values)
mpgPredictions
library(tidyverse)
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
plot(mpgModel_wt, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_wt = data.frame(mpg = mtcars$mpg, pred = mpgModel_wt$fitted.values)
mpgPredictions_wt
ggplot(data = mpgPredictions_wt, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_wt)
mpgModel_all = lm(formula = mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
plot(mpgModel_all, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_all = data.frame(mpg = mtcars$mpg, pred = mpgModel_all$fitted.values)
mpgPredictions_all
ggplot(data = mpgPredictions_all, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_all)
summary(mpgModel_all)
summary(mpgModel_all)
reducedModel  = step(mpgModel_all, direction ="backward")
summary(reducedModel)
# Creating a data frame with actual values and predicted values.
mpgPredictions = data.frame(mpg = mtcars$mpg, pred_ConsideringOnlyWeight = mpgModel_wt$fitted.values, pred_ConsideringAll = mpgModel_all$fitted.values, pred_UsingStepFun = reducedModel$fitted.values)
mpgPredictions
library(tidyverse)
library(MASS)
data("faithful")
str(faithful)
summary(faithful)
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point()
cor.test(faithful$waiting, faithful$eruptions)
eruptionModel = lm(eruptions ~ waiting, data = faithful)
eruptionModel
ggplot(data = faithful ,aes(x = waiting , y = eruptions)) + geom_point() + geom_abline(mapping = aes(slope = eruptionModel$coefficients[2], intercept = eruptionModel$coefficients[1]), color ='red ')
layout(matrix (1:6, ncol = 2, byrow = TRUE))
plot(eruptionModel, 1:6)
newWaitingTime = data.frame( waiting = c(80))      # providing waiting time
predict(eruptionModel, newdata = newWaitingTime)   # predicting eruption using eruptionModel
library(tidyverse)
library(MASS)
data("mtcars")
? mtcars
View(mtcars)
mpgModel_wt = lm(formula = mpg ~ wt, data = mtcars)
plot(mpgModel_wt, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_wt = data.frame(mpg = mtcars$mpg, pred = mpgModel_wt$fitted.values)
mpgPredictions_wt
ggplot(data = mpgPredictions_wt, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_wt)
mpgModel_all = lm(formula = mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
plot(mpgModel_all, which =1)
# Creating a data frame with actual values and predicted values.
mpgPredictions_all = data.frame(mpg = mtcars$mpg, pred = mpgModel_all$fitted.values)
mpgPredictions_all
ggplot(data = mpgPredictions_all, aes(x = mpg , y = pred)) + geom_point() + geom_abline(mapping = aes(slope = 1, intercept = 0), color ='red ')
summary(mpgModel_all)
reducedModel  = step(mpgModel_all, direction ="backward")
summary(reducedModel)
# Creating a data frame with actual values and predicted values.
mpgPredictions = data.frame(mpg = mtcars$mpg, pred_ConsideringOnlyWeight = mpgModel_wt$fitted.values, pred_ConsideringAll = mpgModel_all$fitted.values, pred_UsingStepFun = reducedModel$fitted.values)
mpgPredictions
